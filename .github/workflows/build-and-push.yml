name: Deploy REST Service to ECS

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REPO_NAME: rest-service-repo-dev  # Nome del repository ECR
      IMAGE_NAME: rest-service-dev      # Nome dell'immagine
      REGION: eu-south-1                # Regione di ECR

    steps:
      # Step 1: Checkout del codice dal repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configura le credenziali AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Step 3: Login a Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Verifica se il repository ECR esiste, altrimenti crealo
      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --region $REGION --repository-names $REPO_NAME || \
          aws ecr create-repository --region $REGION --repository-name $REPO_NAME

      # Step 5: Build e Push dell'immagine Docker
      - name: Build and Push Docker Image
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Build dell'immagine Docker
          docker build -t $IMAGE_NAME .

          # Tagging dell'immagine
          docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:$IMAGE_NAME

          # Push dell'immagine su Amazon ECR
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:$IMAGE_NAME

      # Step 6: Recupera la configurazione dall'infrastruttura
      - name: Retrieve Configuration
        run: |
          aws s3 cp s3://shared-state/environments/dev/terraform.tfstate terraform.tfstate
          CLUSTER_NAME=$(jq -r '.outputs.ecs_cluster_id.value' terraform.tfstate)
          SUBNETS=$(jq -r '.outputs.private_subnet_ids.value | join(",")' terraform.tfstate)
          SG_ID=$(jq -r '.outputs.rest_service_sg_id.value' terraform.tfstate)

          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "SUBNETS=$SUBNETS" >> $GITHUB_ENV
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      # Step 7: Aggiorna la Task Definition
      - name: Update Task Definition
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Verifica il valore dell'account ID e della regione
          echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
          echo "REGION: $REGION"
          echo "IMAGE_NAME: $IMAGE_NAME"

          # Aggiorna la Task Definition con il nuovo tag dell'immagine
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition rest-service-dev)

          UPDATED_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq '.taskDefinition | .containerDefinitions[0].image = "'$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:$IMAGE_NAME'"')

          echo $UPDATED_TASK_DEFINITION > updated-task-definition.json

          aws ecs register-task-definition --cli-input-json file://updated-task-definition.json

      # Step 8: Aggiorna il servizio ECS
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service rest-service-dev \
            --task-definition rest-service-dev \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG_ID],assignPublicIp=DISABLED}" \
            --force-new-deployment